To do:

	Tasks by TEST AREA:

		Delete Vols:
			> create all delete_vol tests for inactive_vols and prospects as for active_vols.
		
		Active and Inactive vols:
			> check the volunteer history messages in volunteer details update in active_vols.js and inactive_vols.js.  Generate history text and verify it's present.
			
		Homescreen Counts:
			> Fix login_counts_homescreen_final.js reactivatedcount - needs to take into account volunteer history.  If volunteer was previously reactivated, making them inactive again will turn BACK the reactivatedcount i.e. reduce it by 1.  After saving the volunteer info (whichever one is on top), could query sql to see if they had been previously inactive, and if so, update the reactivatedcount accordingly when we deactivate them.

		General:
		> make sure we add countyname to all created contacts
		> Creating a volunteer:
			- Save default filled in coordinator as config.defaultCoordinator
			- Run userGeo query with state and org id as inputs.  

					If no results:
						Before save:
					    	config.defaultCoordinator should be the user you're logged in with.
					    After save:
					    	Coordinator should be config.defaultCoordinator.

					If results:
						Before save:
							config.defaultCoordinator should be the coordinator returned by the query
						    If not, console log a statement with all the volunteer location info and the message:
						    	"Check the user geography query - coordinator should be the appropriate coordinator for the volunteer's location.  If it's not, file a bug."
							
						After save:
							Coordinator was assigned correctly (matches config.defaultCoordinator)
						    If not, console log a statement with all the volunteer location info and the message:
						    	"Check the user geography query - coordinator should be the appropriate coordinator for the volunteer's location.  If it's not, file a bug."


	SQL tasks:

		*** > add sql to check DB that status is 1 and active is 0 after marking inactive, or 1 and 1 after marking active
		*** > add sql to check DB that tags were applied correctly after deleting and status and active are 0
		> write sql to remove volunteers with no names - can't execute in prod :(
	
	GENERAL / FRAMEWORK tasks: 
		> create source code check in mocha.js and create a cli prompt for whether to update and rebuild (shouldn't need to ever add node updateAndBuild.js to command)
		> move project to bitbucket so we can make it private so I can add queries.js to version control.
		> Compare Android and iOS accessibility IDs and file issues in 33042.
		> Make sure automation doesn't bail after encountering an error like:
			Uncaught Error: SQL Query getUserGeo did not return within one minute.
				at Timeout.wait_1 [as _onTimeout] (helpers/commons.js:379:31)
	

Create more tests cases:

	Login
	4) Email Active Volunteer, verify volunteer history
	5) Text Active Volunteer, verify volunteer history

	done	In login counts test create objects for each count - should persist across all test sessions.
	done	update the objects during testing:
	done		- anytime we add a volunteer => active += 1, volBase += 1
	done		- activate someone from inactive => re-activated += 1, active volunteers += 1, inactive -= 1
				- mark a volunteer inactive => active -= 1, inactive += 1
	done	At the end of testing verify counts with both sql and expected counts from updated objects.

	> everywhere we check for elements to be present/absent in a list, must assert the element is visible/invisible -- element may not appear, but it is still there, only hidden.  So we can't verify an element is present based on it's id - must make sure the "visible" attribute is true.
	> State selection - figure out how to scroll
	> Anytime we have a long wait statement, be sure to time the action.

Add to walk project:
	> modify wait_for_sql in walk project to match this.
	> update sql queries in walk project to set connection conditionally for test vs. prod

Notes:
	// Keep tests short (less than 6 minutes) and log out and back in
	// in future research if possible to pass in database to query for sql queries, like using :setvar
	// can use clip package to access clipboard: 			
		let clip = require('clipboardy');
		clip.writeSync('VA') // put state on clipboard
	// Had to set user id, name and database name in the login step, and make all queries dynamically set the current database before they run


	// SPACE SAVING COMMANDS - STUFF TO DELETE ON MAC:

		// run CCleaner
		// clean out videos, screenshots, loadTimeLogs, and test results in automation projects 
			rm -rfv $HOME/AppiumAutomationFieldPortal/test_results/* ; rm -rfv $HOME/AppiumAutomationFieldPortal/loadTimeLogs/* ; rm -rfv $HOME/AppiumAutomationFieldPortal/video/* ; rm -rfv $HOME/AppiumAutomationFieldPortal/screenShots/* ; rm -rfv $HOME/AppiumAutomation/test_results/*; rm -rfv $HOME/AppiumAutomation/loadTimeLogs/*; rm -rfv $HOME/AppiumAutomation/video/*; rm -rfv $HOME/AppiumAutomation/screenShots/*

		// to clean out Web Driver folder that accumulates screenshots and logs:
			rm -fR /Users/mliedtka/Library/Developer/Xcode/DerivedData/WebDriverAgent-brdadhpuduowllgivnnvuygpwhzy/Logs/Test*

		// save space in XCode:
			sudo rm -rfv /Library/Developer/CoreSimulator/Profiles/Runtimes/iOS\ 9.2.simruntime #or whatever runtime you don't need
			cd /Applications/Xcode.app/Contents/Developer/Platforms/ ; sudo rm -rf AppleTV* Watch* #or whatever platforms you don't need
			rm -rf ~/Library/Caches/com.apple.dt.Xcode #clean out XCode cache - can get very large.