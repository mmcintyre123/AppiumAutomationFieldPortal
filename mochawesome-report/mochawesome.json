{
  "stats": {
    "suites": 4,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2017-10-02T22:33:14.286Z",
    "end": "2017-10-02T22:33:42.884Z",
    "duration": 28598,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "\u001b[32mAutomation Test in Progress!\u001b[39m",
        "suites": [
          {
            "title": "\u001b[32mRunning automation, please wait for all tests to complete!\u001b[39m",
            "suites": [
              {
                "title": "\u001b[32mRun icon color tests\u001b[39m",
                "suites": [
                  {
                    "title": "Tests in the Active tab",
                    "suites": [],
                    "tests": [
                      {
                        "title": "testing stuff",
                        "fullTitle": "\u001b[32mRun icon color tests\u001b[39m Tests in the Active tab testing stuff",
                        "timedOut": false,
                        "duration": 14062,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.retries = 1\nreturn driver\n    .loginQuick()\n    .elementById(elements.homeScreen.volunteers)\n    .click()\n    .waitForElementToDisappearByClassName(elements.general.spinner)\n    .elementByIdOrNull(elements.volunteers.active)\n    .then((el) => { \n        return driver\n            .is_visible(el)\n            .is_selected(el)\n    })\n    .elementById(elements.actionBar.search)\n    .click()\n    .elementByIdOrNull(elements.volunteers.inActive)\n    .then((el) => {\n        console.log('el is: ' + el + ' should not be null.');\n        return driver\n            .is_not_visible(el) // should pass\n            .is_not_selected(el) // should pass\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9f023388-a8ed-4e74-af0c-f6ed05244110",
                        "parentUUID": "46a365a6-0be0-409a-9aa6-ea27f6466523",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 9999000,
                    "file": "/mocha.js",
                    "uuid": "46a365a6-0be0-409a-9aa6-ea27f6466523",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "fullFile": "/Users/mliedtka/AppiumAutomationFieldPortal/mocha.js",
                    "passes": [
                      {
                        "title": "testing stuff",
                        "fullTitle": "\u001b[32mRun icon color tests\u001b[39m Tests in the Active tab testing stuff",
                        "timedOut": false,
                        "duration": 14062,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.retries = 1\nreturn driver\n    .loginQuick()\n    .elementById(elements.homeScreen.volunteers)\n    .click()\n    .waitForElementToDisappearByClassName(elements.general.spinner)\n    .elementByIdOrNull(elements.volunteers.active)\n    .then((el) => { \n        return driver\n            .is_visible(el)\n            .is_selected(el)\n    })\n    .elementById(elements.actionBar.search)\n    .click()\n    .elementByIdOrNull(elements.volunteers.inActive)\n    .then((el) => {\n        console.log('el is: ' + el + ' should not be null.');\n        return driver\n            .is_not_visible(el) // should pass\n            .is_not_selected(el) // should pass\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9f023388-a8ed-4e74-af0c-f6ed05244110",
                        "parentUUID": "46a365a6-0be0-409a-9aa6-ea27f6466523",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasBeforeHooks": false,
                    "hasAfterHooks": false,
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 14062,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 9999000,
                "file": "/mocha.js",
                "uuid": "c8657db3-564b-41c8-ba31-3c661d2a65b6",
                "beforeHooks": [],
                "afterHooks": [],
                "fullFile": "/Users/mliedtka/AppiumAutomationFieldPortal/mocha.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": false,
                "hasAfterHooks": false,
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 9999000,
            "file": "/mocha.js",
            "uuid": "7b09eedc-70b6-4fb5-90fa-523964b1a836",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/mliedtka/AppiumAutomationFieldPortal/mocha.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 9999000,
        "file": "/mocha.js",
        "uuid": "eab895e3-2b8f-46ad-90fa-f1ad72628408",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "\u001b[32mAutomation Test in Progress!\u001b[39m \"before all\" hook",
            "timedOut": false,
            "duration": 12852,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "//  example how to intercept console output to hide noise\n//\tvar unhook_intercept = intercept(function (txt) {\n//\t\treturn txt.replace(/.*(response|call|get|post).*screenshot.*/i, '');\n//\t})\nlet elements = config.elements;\nlet desired = config.desired;\nconfig.testResults = [];\nrequire(\"./logging\").configure(driver);\n// this.os isn't working for some reason.  todo may need to update to account for iOS sim.\nif (process.platform == 'win32') {\n    desired.app = require(\"./apps\").androidDeviceAppW;\n}\nelse if (process.env._system_name == 'OSX' && config.desired.platformName == 'Android') {\n    desired.app = require(\"./apps\").androidDeviceApp;\n}\nelse if (config.desired.platformName == 'iOS' && config.sim == false) {\n    desired.app = require(\"./apps\").iosDeviceApp;\n}\nelse if (config.desired.platformName == 'iOS' && config.sim == true) {\n    desired.app = require(\"./apps\").iosSimApp;\n}\nelse {\n    throw new Error(\"Commons beforeAll couldn't match device, environment, and args to available apps.\");\n}\nif (process.env.SAUCE) {\n    desired.name = 'Automation Code';\n    desired.tags = ['sample'];\n}\n//clear and create screenshots, and loadTimeLogs directories\nfsExtra.removeSync('./screenShots');\nfsExtra.mkdirs('./screenShots');\nfsExtra.removeSync('./video');\nfsExtra.mkdirs('./video');\nfsExtra.removeSync('./loadTimeLogs');\nfsExtra.mkdirs('./loadTimeLogs');\nfsExtra.removeSync('./test_results');\nfsExtra.mkdirs('./test_results');\n// Open writeStream for logTime file using current local time\nrequire('moment-timezone');\nlet moment = require('moment');\nlet timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\nlet time = moment().tz(timezone).format();\nlet myCurrentTime = time.slice(11, 19).replace(/:/g, '_');\nconfig.dateTime = time.slice(5, 19).replace(/:/g, '_').replace(/-/g, '_'); // like 06_26T01_09_04 (24 hr time)\n// Current date\nlet month = (new Date().getMonth() + 1);\nlet day = new Date().getDate();\nlet year = new Date().getFullYear();\n// Local DateTime\nconfig.myDateTime = (month + '_' + day + '_' + year + '_' + myCurrentTime);\nconfig.wStreamLogTimeFile = fs.createWriteStream('loadTimeLogs/loadTimesLog_' + config.myDateTime + '.txt');\nconfig.wStreamTestResultFile = fs.createWriteStream('test_results/test_result_' + config.myDateTime + '.txt');\nconfig.logTimes = {};\nreturn driver.init(desired);",
            "err": {},
            "isRoot": false,
            "uuid": "b40e4ecc-ada4-45f5-a01b-5738d95c889e",
            "parentUUID": "eab895e3-2b8f-46ad-90fa-f1ad72628408",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "\u001b[32mAutomation Test in Progress!\u001b[39m \"before each\" hook",
            "timedOut": false,
            "duration": 5,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "//test stuff\nconsole.log(('Running ' + this.currentTest.title).green.bold.underline);\nconfig.currentTest = this.currentTest; // put the currentTest object on Config in case we want to access it mid-test\n//record video\nconfig.video = childProcess.spawn('xcrun', ['simctl', 'io', 'booted', 'recordVideo', '/Users/mliedtka/AppiumAutomationFieldPortal/video/' + process.argv.slice(2)[2] + '_' + this.currentTest.title.replace(/\\s+/ig, '_') + '.mp4']);\nconfig.video.on('exit', console.log.bind(console, 'video recording exited'));\nconfig.video.on('close', console.log.bind(console, 'video recording closed'));\n/*\n        //video recorder stuff\n        config.recorder_output = '/Users/mliedtka/AppiumAutomation/video/' + this.currentTest.title.replace(/\\s+/ig,'_') + '.mp4';\n        config.recorder_dir = '/Users/mliedtka/AppiumAutomation/recorder_tmpdir';\n        config.recorder_options = {\n            fps: 40,\n            tmpdir: config.recorder_dir\n        };\n        config.recorder = new Recorder(driver,config.recorder_options)\n        config.recorder.start();\n*/",
            "err": {},
            "isRoot": false,
            "uuid": "d632871d-53f6-4f32-8227-a27ad753b491",
            "parentUUID": "eab895e3-2b8f-46ad-90fa-f1ad72628408",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "\u001b[32mAutomation Test in Progress!\u001b[39m \"after all\" hook",
            "timedOut": false,
            "duration": 1664,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "config.wStreamLogTimeFile.end();\nconfig.wStreamTestResultFile.end();\nreturn driver\n    .sleep(1005)\n    .quit()\n    .finally(function() {\n        //let unhook_intercept = intercept(function (txt) {\n        //\treturn txt.replace(/.*undefined.*/i, '');\n        //})\n        console.log('\\n\\n******* TEST RESULTS *******\\n'.white);\n        config.testResults.map(function(thisTest) {\n            return console.log(thisTest);\n        });\n        console.log('\\n****************************'.white);\n        if (process.env.SAUCE) {\n            return driver.sauceJobStatus(allPassed);\n        }\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "98a1d395-4b1c-480e-950a-9a410869fbd9",
            "parentUUID": "eab895e3-2b8f-46ad-90fa-f1ad72628408",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook",
            "fullTitle": "\u001b[32mAutomation Test in Progress!\u001b[39m \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "// let allPassed = allPassed && this.currentTest.state === 'passed';\n/* //video recorder stuff config.recorder.stopSaveAndClear(config.recorder_output, function() {}.bind(this)); */\nlet thisTest = this.currentTest.title;\nconfig.video.kill('SIGINT');\n//test stuff - screenshot on failure, log results to file and store in object to console.log at the end.\nif (this.currentTest.state == 'failed') {\n    console.log(('\\n\\t' + this.currentTest.err.message).red + '\\n');\n    config.wStreamTestResultFile.write('Test Failed: ' + thisTest + '\\n');\n    config.testResults.push('\\u2717  '.red + thisTest);\n    return driver\n        .takeScreenshotMethod(thisTest);\n}\nelse if (this.currentTest.state == 'passed') {\n    config.wStreamTestResultFile.write('Test Passed: ' + thisTest + '\\n');\n    config.testResults.push('\\u2713  '.green + thisTest);\n}\nelse {\n    config.wStreamTestResultFile.write('Test ' + this.currentTest.state + ' :' + thisTest + '\\n');\n    config.testResults.push('\\u003F  '.yellow + thisTest);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "62a3739d-e94d-42f8-9069-5a684a8e70b7",
            "parentUUID": "eab895e3-2b8f-46ad-90fa-f1ad72628408",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/Users/mliedtka/AppiumAutomationFieldPortal/mocha.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "8a168eef-e2a7-4b6f-b40c-f9b8e4bc0e3f",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "testing stuff",
      "fullTitle": "Tests in the Active tab testing stuff",
      "timedOut": false,
      "duration": 14062,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.retries = 1\nreturn driver\n    .loginQuick()\n    .elementById(elements.homeScreen.volunteers)\n    .click()\n    .waitForElementToDisappearByClassName(elements.general.spinner)\n    .elementByIdOrNull(elements.volunteers.active)\n    .then((el) => { \n        return driver\n            .is_visible(el)\n            .is_selected(el)\n    })\n    .elementById(elements.actionBar.search)\n    .click()\n    .elementByIdOrNull(elements.volunteers.inActive)\n    .then((el) => {\n        console.log('el is: ' + el + ' should not be null.');\n        return driver\n            .is_not_visible(el) // should pass\n            .is_not_selected(el) // should pass\n    })",
      "err": {},
      "isRoot": false,
      "uuid": "9f023388-a8ed-4e74-af0c-f6ed05244110",
      "parentUUID": "46a365a6-0be0-409a-9aa6-ea27f6466523",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "testing stuff",
      "fullTitle": "Tests in the Active tab testing stuff",
      "timedOut": false,
      "duration": 14062,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.retries = 1\nreturn driver\n    .loginQuick()\n    .elementById(elements.homeScreen.volunteers)\n    .click()\n    .waitForElementToDisappearByClassName(elements.general.spinner)\n    .elementByIdOrNull(elements.volunteers.active)\n    .then((el) => { \n        return driver\n            .is_visible(el)\n            .is_selected(el)\n    })\n    .elementById(elements.actionBar.search)\n    .click()\n    .elementByIdOrNull(elements.volunteers.inActive)\n    .then((el) => {\n        console.log('el is: ' + el + ' should not be null.');\n        return driver\n            .is_not_visible(el) // should pass\n            .is_not_selected(el) // should pass\n    })",
      "err": {},
      "isRoot": false,
      "uuid": "9f023388-a8ed-4e74-af0c-f6ed05244110",
      "parentUUID": "46a365a6-0be0-409a-9aa6-ea27f6466523",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}